# -*- coding: utf-8 -*-

import sqlite3
from datetime import datetime

db_path = 'portfel.db'

"""Baza danych zawierająca informacje o strukturze potrfela inwestycyjnego.
   Zawiera informacje o społkach, ilości kupionych akcji, ich wartości.
   Funkcja zlicza wartość portfela, oraz podaje dane wyliczenia danych"""

class RepositoryException(Exception):
    def __init__(self, message, *errors):
        Exception.__init__(self, message)
        self.errors = errors

class Portfel():
    
    def __init__(self, id, date= datetime.now(), invitems=[]):
        self.id = id
        self.date = date
        self.invitems = invitems
        self.amount = sum([item.amount*item.qty for item in self.invitems])

    def __repr__(self):
        return "<Invoice(id='%s', date='%s', amount='%s', items='%s')>" % (
                    self.id, self.date, str(self.amount), str(self.invitems)
                )


class Akcje():
    
    def __init__(self, Spolka, Wartosc, Ilosc):
        self.name = Spolka
        self.amount = Wartosc
        self.qty = Ilosc
        
    def __repr__(self):
        return "<InvItem(name='%s', amount='%s', qty='%s')>" % (
                    self.name, str(self.amount), str(self.qty)
                )

class Repository():
    def __init__(self):
        try:
            self.conn = self.get_connection()
        except Exception as e:
            raise RepositoryException('GET CONNECTION:', *e.args)
        self._complete = False


    def __enter__(self):
        return self

    def __exit__(self, type_, value, traceback):
        self.close()

    def complete(self):
        self._complete = True

    def get_connection(self):
        return sqlite3.connect(db_path)

    def close(self):
        if self.conn:
            try:
                if self._complete:
                    self.conn.commit()
                else:
                    self.conn.rollback()
            except Exception as e:
                raise RepositoryException(*e.args)
            finally:
                try:
                    self.conn.close()
                except Exception as e:
                    raise RepositoryException(*e.args)


class InvoiceRepository(Repository):

    def add(self, invoice):
        
        try:
            c = self.conn.cursor()

            Wartosc = sum([item.amount*item.qty for item in invoice.invitems])
            c.execute('INSERT INTO Portfel (id, Data, Wartosc) VALUES(?, ?, ?)',
                        (invoice.id, str(invoice.date), invoice.amount)
                    )

            if invoice.invitems:
                for invitem in invoice.invitems:
                    try:
                        c.execute('INSERT INTO Akcje (Spolka, Wartosc, Ilosc, invoice_id) VALUES(?,?,?,?)',
                                        (invitem.name, invitem.amount, invitem.qty, invoice.id)
                                )
                    except Exception as e:

                        raise RepositoryException('error adding invoice item: %s, to invoice: %s' %
                                                    (str(invitem), str(invoice.id))
                                                )
        except Exception as e:

            raise RepositoryException('error adding invoice %s' % str(invoice))

    def delete(self, invoice):
       
        try:
            c = self.conn.cursor()

            c.execute('DELETE FROM Akcje WHERE invoice_id=?', (invoice.id,))

            c.execute('DELETE FROM Portfel WHERE id=?', (invoice.id,))

        except Exception as e:

            raise RepositoryException('error deleting invoice %s' % str(invoice))

    def getById(self, id):
        
        try:
            c = self.conn.cursor()
            c.execute("SELECT * FROM Portfel WHERE id=?", (id,))
            inv_row = c.fetchone()
            invoice = Portfel(id=id)
            if inv_row == None:
                invoice=None
            else:
                invoice.date = inv_row[1]
                invoice.amount = inv_row[2]
                c.execute("SELECT * FROM Akcje WHERE invoice_id=? order by Spolka", (id,))
                inv_items_rows = c.fetchall()
                items_list = []
                for item_row in inv_items_rows:
                    item = Akcje(Spolka=item_row[0], Wartosc=item_row[1], Ilosc=item_row[2])
                    items_list.append(item)
                invoice.invitems=items_list
        except Exception as e:

            raise RepositoryException('error getting by id invoice_id: %s' % str(id))
        return invoice

    def update(self, invoice):
        
        try:

            inv_oryg = self.getById(invoice.id)
            if inv_oryg != None:

                self.delete(invoice)
            self.add(invoice)

        except Exception as e:

            raise RepositoryException('error updating invoice %s' % str(invoice))



if __name__ == '__main__':
    try:
        with InvoiceRepository() as invoice_repository:
            invoice_repository.add(
                Portfel(id = 1, date = datetime.now(),
                        invitems = [
                            Akcje(Spolka = "Orlen",   Wartosc = 11.90, Ilosc = 100),
                            Akcje(Spolka = "PKO BP",    Wartosc = 40.30, Ilosc = 230),
                            Akcje(Spolka = "TVN",  Wartosc = 32.40, Ilosc = 500),
                        ]
                    )
                )
            invoice_repository.complete()
    except RepositoryException as e:
        print(e)
